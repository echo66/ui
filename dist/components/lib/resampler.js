// return min and max values from the window defined by samplesPerPixel
"use strict";

function minMax(buffer, extractAtTimes, sampleRate, windowSize, defaultValue, downSampledAt) {
  // if the buffer comes from the `createSnapshot` function
  // `downSampledAt` is equivalent to the window size
  // of the snapshot
  downSampledAt = downSampledAt || 1;
  windowSize = windowSize / downSampledAt;
  sampleRate = sampleRate / downSampledAt;
  // console.log(windowSize);
  // console.time('minMax');

  var bufferLength = buffer.length;
  var data = [];
  var slice = buffer instanceof Float32Array ? "subarray" : "slice";

  for (var i = 0, length = extractAtTimes.length; i < length; i++) {
    var startTime = extractAtTimes[i];
    var sampleStart = startTime * sampleRate;

    if (sampleStart < 0 || sampleStart > bufferLength) {
      data = data.concat([defaultValue, defaultValue]);
      continue;
    }

    // get min and max value for each pixel
    // replace with `slice` if it's a raw object
    var extract = buffer[slice](sampleStart, sampleStart + windowSize);
    var min = Infinity,
        max = -Infinity;
    var extractLength = extract.length;

    for (var j = 0; j < extractLength; j++) {
      var value = extract[j];
      if (value < min) {
        min = value;
      }
      if (value > max) {
        max = value;
      }
    }

    data.push(min);
    data.push(max);
  }

  // console.timeEnd('minMax');
  return data;
}

// pick a value in each window
// alternate between min and max value
function createSnapshot(buffer, windowSize) {
  // @NOTE: maybe use a Float32Array for performance (cf. @padenot talk) ?
  var snapshot = [];
  var bufferLength = buffer.length;
  var slice = buffer instanceof Float32Array ? "subarray" : "slice";
  var captureMin = true;
  // return;
  for (var i = 0; i < bufferLength; i += windowSize) {
    var extract = buffer[slice](i, i + windowSize);
    var min = Infinity,
        max = -Infinity;
    var extractLength = extract.length;

    for (var j = 0; j < extractLength; j++) {
      var value = extract[j];
      if (value < min) {
        min = value;
      }
      if (value > max) {
        max = value;
      }
    }

    if (captureMin) {
      snapshot.push(min);
    } else {
      snapshot.push(max);
    }

    captureMin = !captureMin;
  }

  return snapshot;
}

module.exports = {
  minMax: minMax,
  createSnapshot: createSnapshot
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi9jb21wb25lbnRzL3NlZ21lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsU0FBUyxNQUFNLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7Ozs7QUFJM0YsZUFBYSxHQUFHLGFBQWEsSUFBSSxDQUFDLENBQUM7QUFDbkMsWUFBVSxHQUFHLFVBQVUsR0FBRyxhQUFhLENBQUM7QUFDeEMsWUFBVSxHQUFHLFVBQVUsR0FBRyxhQUFhLENBQUM7Ozs7QUFJeEMsTUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNqQyxNQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFDZCxNQUFJLEtBQUssR0FBRyxBQUFDLE1BQU0sWUFBWSxZQUFZLEdBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQzs7QUFFcEUsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMvRCxRQUFJLFNBQVMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsUUFBSSxXQUFXLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQzs7QUFFekMsUUFBSSxXQUFXLEdBQUcsQ0FBQyxJQUFJLFdBQVcsR0FBRyxZQUFZLEVBQUU7QUFDakQsVUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUNqRCxlQUFTO0tBQ1Y7Ozs7QUFJRCxRQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLFdBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUNuRSxRQUFJLEdBQUcsR0FBRyxRQUFRO1FBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3BDLFFBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBRW5DLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsVUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFVBQUksS0FBSyxHQUFHLEdBQUcsRUFBRTtBQUFFLFdBQUcsR0FBRyxLQUFLLENBQUM7T0FBRTtBQUNqQyxVQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7QUFBRSxXQUFHLEdBQUcsS0FBSyxDQUFDO09BQUU7S0FDbEM7O0FBRUQsUUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLFFBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDaEI7OztBQUdELFNBQU8sSUFBSSxDQUFDO0NBQ2I7Ozs7QUFJRCxTQUFTLGNBQWMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFOztBQUUxQyxNQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbEIsTUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNqQyxNQUFJLEtBQUssR0FBRyxBQUFDLE1BQU0sWUFBWSxZQUFZLEdBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUNwRSxNQUFJLFVBQVUsR0FBRyxJQUFJLENBQUM7O0FBRXRCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLEVBQUUsQ0FBQyxJQUFJLFVBQVUsRUFBRTtBQUNqRCxRQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQztBQUMvQyxRQUFJLEdBQUcsR0FBRyxRQUFRO1FBQUUsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ3BDLFFBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBRW5DLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsVUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFVBQUksS0FBSyxHQUFHLEdBQUcsRUFBRTtBQUFFLFdBQUcsR0FBRyxLQUFLLENBQUM7T0FBRTtBQUNqQyxVQUFJLEtBQUssR0FBRyxHQUFHLEVBQUU7QUFBRSxXQUFHLEdBQUcsS0FBSyxDQUFDO09BQUU7S0FDbEM7O0FBRUQsUUFBSSxVQUFVLEVBQUU7QUFDZCxjQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCLE1BQU07QUFDTCxjQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCOztBQUVELGNBQVUsR0FBRyxDQUFDLFVBQVUsQ0FBQztHQUMxQjs7QUFFRCxTQUFPLFFBQVEsQ0FBQztDQUNqQjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsUUFBTSxFQUFFLE1BQU07QUFDZCxnQkFBYyxFQUFFLGNBQWM7Q0FDL0IsQ0FBQyIsImZpbGUiOiJlczYvY29tcG9uZW50cy9zZWdtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmV0dXJuIG1pbiBhbmQgbWF4IHZhbHVlcyBmcm9tIHRoZSB3aW5kb3cgZGVmaW5lZCBieSBzYW1wbGVzUGVyUGl4ZWxcbmZ1bmN0aW9uIG1pbk1heChidWZmZXIsIGV4dHJhY3RBdFRpbWVzLCBzYW1wbGVSYXRlLCB3aW5kb3dTaXplLCBkZWZhdWx0VmFsdWUsIGRvd25TYW1wbGVkQXQpIHtcbiAgLy8gaWYgdGhlIGJ1ZmZlciBjb21lcyBmcm9tIHRoZSBgY3JlYXRlU25hcHNob3RgIGZ1bmN0aW9uXG4gIC8vIGBkb3duU2FtcGxlZEF0YCBpcyBlcXVpdmFsZW50IHRvIHRoZSB3aW5kb3cgc2l6ZVxuICAvLyBvZiB0aGUgc25hcHNob3RcbiAgZG93blNhbXBsZWRBdCA9IGRvd25TYW1wbGVkQXQgfHzCoDE7XG4gIHdpbmRvd1NpemUgPSB3aW5kb3dTaXplIC8gZG93blNhbXBsZWRBdDtcbiAgc2FtcGxlUmF0ZSA9IHNhbXBsZVJhdGUgLyBkb3duU2FtcGxlZEF0O1xuICAvLyBjb25zb2xlLmxvZyh3aW5kb3dTaXplKTtcbiAgLy8gY29uc29sZS50aW1lKCdtaW5NYXgnKTtcblxuICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGRhdGEgPSBbXTtcbiAgdmFyIHNsaWNlID0gKGJ1ZmZlciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSkgPyAnc3ViYXJyYXknIDogJ3NsaWNlJztcblxuICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZXh0cmFjdEF0VGltZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3RhcnRUaW1lID0gZXh0cmFjdEF0VGltZXNbaV07XG4gICAgdmFyIHNhbXBsZVN0YXJ0ID0gc3RhcnRUaW1lICogc2FtcGxlUmF0ZTtcblxuICAgIGlmIChzYW1wbGVTdGFydCA8IDAgfHzCoHNhbXBsZVN0YXJ0ID4gYnVmZmVyTGVuZ3RoKSB7XG4gICAgICBkYXRhID0gZGF0YS5jb25jYXQoW2RlZmF1bHRWYWx1ZSwgZGVmYXVsdFZhbHVlXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBnZXQgbWluIGFuZCBtYXggdmFsdWUgZm9yIGVhY2ggcGl4ZWxcbiAgICAvLyByZXBsYWNlIHdpdGggYHNsaWNlYCBpZiBpdCdzIGEgcmF3IG9iamVjdFxuICAgIHZhciBleHRyYWN0ID0gYnVmZmVyW3NsaWNlXShzYW1wbGVTdGFydCwgc2FtcGxlU3RhcnQgKyB3aW5kb3dTaXplKTtcbiAgICB2YXIgbWluID0gSW5maW5pdHksIG1heCA9IC1JbmZpbml0eTtcbiAgICB2YXIgZXh0cmFjdExlbmd0aCA9IGV4dHJhY3QubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBleHRyYWN0TGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGV4dHJhY3Rbal07XG4gICAgICBpZiAodmFsdWUgPCBtaW4pIHsgbWluID0gdmFsdWU7IH1cbiAgICAgIGlmICh2YWx1ZSA+IG1heCkgeyBtYXggPSB2YWx1ZTsgfVxuICAgIH1cblxuICAgIGRhdGEucHVzaChtaW4pO1xuICAgIGRhdGEucHVzaChtYXgpO1xuICB9XG5cbiAgLy8gY29uc29sZS50aW1lRW5kKCdtaW5NYXgnKTtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8vIHBpY2sgYSB2YWx1ZSBpbiBlYWNoIHdpbmRvd1xuLy8gYWx0ZXJuYXRlIGJldHdlZW4gbWluIGFuZCBtYXggdmFsdWVcbmZ1bmN0aW9uIGNyZWF0ZVNuYXBzaG90KGJ1ZmZlciwgd2luZG93U2l6ZSkge1xuICAvLyBATk9URTogbWF5YmUgdXNlIGEgRmxvYXQzMkFycmF5IGZvciBwZXJmb3JtYW5jZSAoY2YuIEBwYWRlbm90IHRhbGspID9cbiAgdmFyIHNuYXBzaG90ID0gW107XG4gIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICB2YXIgc2xpY2UgPSAoYnVmZmVyIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSA/ICdzdWJhcnJheScgOiAnc2xpY2UnO1xuICB2YXIgY2FwdHVyZU1pbiA9IHRydWU7XG4gIC8vIHJldHVybjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJMZW5ndGg7IGkgKz0gd2luZG93U2l6ZSkge1xuICAgIHZhciBleHRyYWN0ID0gYnVmZmVyW3NsaWNlXShpLCBpICsgd2luZG93U2l6ZSk7XG4gICAgdmFyIG1pbiA9IEluZmluaXR5LCBtYXggPSAtSW5maW5pdHk7XG4gICAgdmFyIGV4dHJhY3RMZW5ndGggPSBleHRyYWN0Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZXh0cmFjdExlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgdmFsdWUgPSBleHRyYWN0W2pdO1xuICAgICAgaWYgKHZhbHVlIDwgbWluKSB7IG1pbiA9IHZhbHVlOyB9XG4gICAgICBpZiAodmFsdWUgPiBtYXgpIHsgbWF4ID0gdmFsdWU7IH1cbiAgICB9XG5cbiAgICBpZiAoY2FwdHVyZU1pbikge1xuICAgICAgc25hcHNob3QucHVzaChtaW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbmFwc2hvdC5wdXNoKG1heCk7XG4gICAgfVxuXG4gICAgY2FwdHVyZU1pbiA9ICFjYXB0dXJlTWluO1xuICB9XG5cbiAgcmV0dXJuIHNuYXBzaG90O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbWluTWF4OiBtaW5NYXgsXG4gIGNyZWF0ZVNuYXBzaG90OiBjcmVhdGVTbmFwc2hvdFxufTtcbiJdfQ==