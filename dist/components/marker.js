"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _inherits = require("babel-runtime/helpers/inherits")["default"];

var _get = require("babel-runtime/helpers/get")["default"];

var _createClass = require("babel-runtime/helpers/create-class")["default"];

var _core = require("babel-runtime/core-js")["default"];

var _require = require("../helpers/utils");

var uniqueId = _require.uniqueId;
var accessors = _require.accessors;

var _require2 = require("../core/layer");

var Layer = _require2.Layer;

var Marker = (function (_Layer) {
  function Marker() {
    _classCallCheck(this, Marker);

    _get(_core.Object.getPrototypeOf(Marker.prototype), "constructor", this).call(this);

    var defaults = {
      type: "marker",
      id: uniqueId(name),
      displayHandle: true
    };

    this.params(defaults);
    this.width(1);
    this.color("#000000");
    this.opacity("0.7");
    this.data([{ x: 0 }]);

    this.x(function (d) {
      var v = arguments[1] === undefined ? null : arguments[1];

      if (v === null) {
        return d.x;
      }
      d.x = parseFloat(v, 10);
    });

    this.height(function (d) {
      var v = arguments[1] === undefined ? null : arguments[1];

      if (v === null) {
        return d.height;
      }
      d.height = v;
    });
  }

  _inherits(Marker, _Layer);

  _createClass(Marker, {
    xZoom: {
      value: function xZoom() {
        this.update();
      }
    },
    setCurrentTime: {
      value: function setCurrentTime(currentTime) {
        var x = this.x();

        if (!Array.isArray(currentTime)) {
          x(this.data()[0], currentTime);
        } else {
          this.data(currentTime);
        }

        return this;
      }
    },
    handleDrag: {
      value: function handleDrag(el, e) {
        this.move(el, e.originalEvent.dx, e.originalEvent.dy);
      }
    },
    move: {
      value: function move(item, dx, dy) {
        item = this.d3.select(item);
        var datum = item.datum();

        var xScale = this.base.xScale;
        var xRange = xScale.range();
        var xAccessor = this.x();
        var x = xScale(xAccessor(datum));
        var targetX = x + dx;

        // if (targetX >= xRange[0] && targetX <= xRange[1]) {
        //   x = targetX;
        // }
        x = targetX;

        xAccessor(datum, xScale.invert(x));
        // redraw element
        this.draw(item);
      }
    },
    update: {
      value: function update() {
        var data = arguments[0] === undefined ? null : arguments[0];

        if (data !== null && !Array.isArray(data)) {
          data = [data];
        }
        _get(_core.Object.getPrototypeOf(Marker.prototype), "update", this).call(this, data);

        this.items = this.g.selectAll("." + this.param("unitClass")).data(this.data());

        var sel = this.items.enter().append("g").classed("item", true).classed(this.param("unitClass"), true);

        var handleHeight = 8;
        var y = this.param("displayHandle") ? handleHeight : 0;

        var heightAccessor = this.height();

        sel.append("line").style("stroke-width", this.width()).style("stroke", this.color()).style("opacity", this.opacity()).attr("x1", 0).attr("x2", 0).attr("y1", y)
        // .attr('y2', this.param('height'));
        .attr("y2", heightAccessor);

        if (this.param("displayHandle")) {
          var area = this.d3.svg.area().x(function (d) {
            return d;
          }).y0(0).y1(handleHeight);

          sel.append("path").attr("d", area([-4, 4])).style("opacity", this.opacity()).style("fill", this.color());
        }

        this.items.exit().remove();
      }
    },
    draw: {
      value: function draw() {
        var el = arguments[0] === undefined ? null : arguments[0];

        el = el || this.items;

        var xScale = this.base.xScale;
        var xAccessor = this.x();
        var x = function (d) {
          return xScale(xAccessor(d));
        };

        el.attr("transform", function (d) {
          return "translate(" + x(d) + ", 0)";
        });
      }
    }
  });

  return Marker;
})(Layer);

accessors.getFunction(Marker.prototype, ["color", "opacity", "width", "x", "height"]);

function factory() {
  return new Marker();
}
factory.Marker = Marker;

module.exports = factory;
//# sourceMappingURL=data:application/json;base64,